//Contains multitasking tables and functions

#include "multitask.h"

/*
Memory unit header: byte 52 - 56: register pointer
points to the Process Save State (PSS):
PROCESS ID
EIP
EAX
EBX
ECX
EDX
ESP
EBP
ESI
EDI
EFLAGS
= 10 Registers a 4 byte to be saved (per process) + ID = 44 Byte
*/

//Creates a PIT entry and allocates 44 byte for its registers
void ph_add_process(int address)
{
	int pitptr = (int*) (((int)pit)+64);
	if(!pit)
		return;
	
	int index = 0;
	while(index < 1008 && pitptr[index] != 0)
	{	
		index += 2;
	}
	
	//Empty slot found or pit is full
	if(pitptr[index] == 0)
	{
		pitptr[index] = ((int*)address)[3];
		pitptr[index] = address;

		//create pss memory
		int *pss = pit[12];
		pss = (int*) (((int)pss)+64);

		int it = 0;
		while(pss[it] == 0 && it < 1008)
		{
			it += 11;	
		}
	
		//
		if(pss[it] == 0)
		{
			pss[it] = pitptr[index];
			((int*)address)[13] = ((int)pss)-64;
		}
	}
}

void ph_switch_process()
{
	

}

int ph_get_active_process()
{



}

